/*
* ===========================================================
* PROGRESS BAR - CIRCLE PROGRESS BAR - COUNTER - COUNTDOWN - FRAMEWORK Y
* ===========================================================
* This script manage the following component: progress bar, circle progress bar, counter and countdown.
* Documentation: www.framework-y.com/components/components.html#counter
* Documentation: www.framework-y.com/components/components.html#countdown
* Documentation: www.framework-y.com/components/components.html#progress-bar
* 
* Schiocco - Copyright (c) - Schiocco - Framework Y
*/

"use strict"; !function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : t("object" == typeof exports ? require("jquery") : jQuery) }(function (t) { var i = function (e, s) { this.$element = t(e), this.options = t.extend({}, i.DEFAULTS, this.dataOptions(), s), this.init() }; i.DEFAULTS = { from: 0, to: 0, speed: 1e3, refreshInterval: 100, decimals: 0, formatter: function (t, i) { return t.toFixed(i.decimals) }, onUpdate: null, onComplete: null }, i.prototype.init = function () { this.value = this.options.from, this.loops = Math.ceil(this.options.speed / this.options.refreshInterval), this.loopCount = 0, this.increment = (this.options.to - this.options.from) / this.loops }, i.prototype.dataOptions = function () { var t = { from: this.$element.data("from"), to: this.$element.data("to"), speed: this.$element.data("speed"), refreshInterval: this.$element.data("refresh-interval"), decimals: this.$element.data("decimals") }, i = Object.keys(t); for (var e in i) { var s = i[e]; void 0 === t[s] && delete t[s] } return t }, i.prototype.update = function () { this.value += this.increment, this.loopCount++, this.render(), "function" == typeof this.options.onUpdate && this.options.onUpdate.call(this.$element, this.value), this.loopCount >= this.loops && (clearInterval(this.interval), this.value = this.options.to, "function" == typeof this.options.onComplete && this.options.onComplete.call(this.$element, this.value)) }, i.prototype.render = function () { var t = this.options.formatter.call(this.$element, this.value, this.options); this.$element.text(t) }, i.prototype.restart = function () { this.stop(), this.init(), this.start() }, i.prototype.start = function () { this.stop(), this.render(), this.interval = setInterval(this.update.bind(this), this.options.refreshInterval) }, i.prototype.stop = function () { this.interval && clearInterval(this.interval) }, i.prototype.toggle = function () { this.interval ? this.stop() : this.start() }, t.fn.countTo = function (e) { return this.each(function () { var s = t(this), n = s.data("countTo"), a = !n || "object" == typeof e, r = "object" == typeof e ? e : {}, o = "string" == typeof e ? e : "start"; a && (n && n.stop(), s.data("countTo", n = new i(this, r))), n[o].call(n) }) } }), function (t) { if ("function" == typeof define && define.amd) define(["jquery"], t); else if ("object" == typeof module && module.exports) { var i = require("jquery"); t(i), module.exports = i } else t(jQuery) }(function (t) { function i(t) { this.init(t) } i.prototype = { value: 0, size: 100, startAngle: -Math.PI, thickness: "auto", fill: { gradient: ["#3aeabb", "#fdd250"] }, emptyFill: "rgba(0, 0, 0, .1)", animation: { duration: 1200, easing: "circleProgressEasing" }, animationStartValue: 0, reverse: !1, lineCap: "butt", insertMode: "prepend", constructor: i, el: null, canvas: null, ctx: null, radius: 0, arcFill: null, lastFrameValue: 0, init: function (i) { t.extend(this, i), this.radius = this.size / 2, this.initWidget(), this.initFill(), this.draw(), this.el.trigger("circle-inited") }, initWidget: function () { this.canvas || (this.canvas = t("<canvas>")["prepend" == this.insertMode ? "prependTo" : "appendTo"](this.el)[0]); var i = this.canvas; if (i.width = this.size, i.height = this.size, this.ctx = i.getContext("2d"), window.devicePixelRatio > 1) { var e = window.devicePixelRatio; i.style.width = i.style.height = this.size + "px", i.width = i.height = this.size * e, this.ctx.scale(e, e) } }, initFill: function () { function i() { var i = t("<canvas>")[0]; i.width = e.size, i.height = e.size, i.getContext("2d").drawImage(f, 0, 0, a, a), e.arcFill = e.ctx.createPattern(i, "no-repeat"), e.drawFrame(e.lastFrameValue) } var e = this, s = this.fill, n = this.ctx, a = this.size; if (!s) throw Error("The fill is not specified!"); if ("string" == typeof s && (s = { color: s }), s.color && (this.arcFill = s.color), s.gradient) { var r = s.gradient; if (1 == r.length) this.arcFill = r[0]; else if (r.length > 1) { for (var o = s.gradientAngle || 0, l = s.gradientDirection || [a / 2 * (1 - Math.cos(o)), a / 2 * (1 + Math.sin(o)), a / 2 * (1 + Math.cos(o)), a / 2 * (1 - Math.sin(o))], h = n.createLinearGradient.apply(n, l), c = 0; c < r.length; c++) { var d = r[c], u = c / (r.length - 1); t.isArray(d) && (u = d[1], d = d[0]), h.addColorStop(u, d) } this.arcFill = h } } if (s.image) { var f; s.image instanceof Image ? f = s.image : (f = new Image).src = s.image, f.complete ? i() : f.onload = i } }, draw: function () { this.animation ? this.drawAnimated(this.value) : this.drawFrame(this.value) }, drawFrame: function (t) { this.lastFrameValue = t, this.ctx.clearRect(0, 0, this.size, this.size), this.drawEmptyArc(t), this.drawArc(t) }, drawArc: function (t) { if (0 !== t) { var i = this.ctx, e = this.radius, s = this.getThickness(), n = this.startAngle; i.save(), i.beginPath(), this.reverse ? i.arc(e, e, e - s / 2, n - 2 * Math.PI * t, n) : i.arc(e, e, e - s / 2, n, n + 2 * Math.PI * t), i.lineWidth = s, i.lineCap = this.lineCap, i.strokeStyle = this.arcFill, i.stroke(), i.restore() } }, drawEmptyArc: function (t) { var i = this.ctx, e = this.radius, s = this.getThickness(), n = this.startAngle; t < 1 && (i.save(), i.beginPath(), t <= 0 ? i.arc(e, e, e - s / 2, 0, 2 * Math.PI) : this.reverse ? i.arc(e, e, e - s / 2, n, n - 2 * Math.PI * t) : i.arc(e, e, e - s / 2, n + 2 * Math.PI * t, n), i.lineWidth = s, i.strokeStyle = this.emptyFill, i.stroke(), i.restore()) }, drawAnimated: function (i) { var e = this, s = this.el, n = t(this.canvas); n.stop(!0, !1), s.trigger("circle-animation-start"), n.css({ animationProgress: 0 }).animate({ animationProgress: 1 }, t.extend({}, this.animation, { step: function (t) { var n = e.animationStartValue * (1 - t) + i * t; e.drawFrame(n), s.trigger("circle-animation-progress", [t, n]) } })).promise().always(function () { s.trigger("circle-animation-end") }) }, getThickness: function () { return t.isNumeric(this.thickness) ? this.thickness : this.size / 14 }, getValue: function () { return this.value }, setValue: function (t) { this.animation && (this.animationStartValue = this.lastFrameValue), this.value = t, this.draw() } }, t.circleProgress = { defaults: i.prototype }, t.easing.circleProgressEasing = function (t) { return t < .5 ? .5 * (t *= 2) * t * t : 1 - .5 * (t = 2 - 2 * t) * t * t }, t.fn.circleProgress = function (e, s) { var n = "circle-progress", a = this.data(n); if ("widget" == e) { if (!a) throw Error('Calling "widget" method on not initialized instance is forbidden'); return a.canvas } if ("value" == e) { if (!a) throw Error('Calling "value" method on not initialized instance is forbidden'); if (void 0 === s) return a.getValue(); var r = arguments[1]; return this.each(function () { t(this).data(n).setValue(r) }) } return this.each(function () { var s = t(this), a = s.data(n), r = t.isPlainObject(e) ? e : {}; if (a) a.init(r); else { var o = t.extend({}, s.data()); "string" == typeof o.fill && (o.fill = JSON.parse(o.fill)), "string" == typeof o.animation && (o.animation = JSON.parse(o.animation)), (r = t.extend(o, r)).el = s, a = new i(r), s.data(n, a) } }) } }), function (t) { t.fn.downCount = function (i, e) { var s = t.extend({ date: null, offset: null }, i); s.date || t.error("Date is not defined."), Date.parse(s.date) || t.error("Incorrect date format, it should look like this, 12/24/2012 12:00:00."); var n = this, a = function () { var t = new Date, i = t.getTime() + 6e4 * t.getTimezoneOffset(); return new Date(i + 36e5 * s.offset) }, r = setInterval(function () { var t = new Date(s.date) - a(); if (t < 0) return clearInterval(r), void (e && "function" == typeof e && e()); var i = Math.floor(t / 864e5), o = Math.floor(t % 864e5 / 36e5), l = Math.floor(t % 36e5 / 6e4), h = Math.floor(t % 6e4 / 1e3); i = String(i).length >= 2 ? i : "0" + i, o = String(o).length >= 2 ? o : "0" + o, l = String(l).length >= 2 ? l : "0" + l, h = String(h).length >= 2 ? h : "0" + h; var c = 1 === i ? "day" : "days", d = 1 === o ? "hour" : "hours", u = 1 === l ? "minute" : "minutes", f = 1 === h ? "second" : "seconds"; n.find(".days").text(i), n.find(".hours").text(o), n.find(".minutes").text(l), n.find(".seconds").text(h), n.find(".days_ref").text(c), n.find(".hours_ref").text(d), n.find(".minutes_ref").text(u), n.find(".seconds_ref").text(f) }, 1e3) } }(jQuery), function (t) { t(document).ready(function () { t("[data-time].countdown").each(function (i) { t(this).downCount({ date: t(this).attr("data-time"), offset: t(this).attr("data-utc-offset") }) }), t(window).scroll(function () { t(".counter").each(function () { if (isScrollView(this)) { var i = t(this).attr("data-trigger"), e = t(this).attr("data-separator"); isEmpty(e) && (e = "."), (isEmpty(i) || "scroll" == i) && (t(this).countTo({ formatter: function (t, i) { return t.toFixed(i.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, e) } }), t(this).attr("data-trigger", "null")) } }), t("[data-progress].progress-bar").each(function () { if (isScrollView(this)) { var i = t(this).attr("data-trigger"); (isEmpty(i) || "scroll" == i) && (t(this).css("width", 0), t(this).css("width", t(this).attr("data-progress") + "%"), t(this).attr("data-trigger", "null")) } }), t("[data-progress].progress-circle").each(function () { if (isScrollView(this)) { var i = t(this).attr("data-trigger"); (isEmpty(i) || "scroll" == i) && (t(this).progressCircle(), t(this).attr("data-trigger", "null")) } }) }) }), t.fn.progressCircle = function () { var i = t(this).attr("data-options"), e = t(this).attr("data-size"), s = t(this).attr("data-color"), n = t(this).attr("data-unit"), a = t(this).attr("data-thickness"), a = t(this).attr("data-thickness"); isEmpty(s) && (s = "#565656"), isEmpty(a) && (a = 2), (isEmpty(e) || "auto" == e) && (e = t(this).outerWidth()), null == n && (n = "%"); var r = { value: parseInt(t(this).attr("data-progress"), 10) / 100, size: e, fill: { gradient: [s, s] }, thickness: a, startAngle: -Math.PI / 2 }; isEmpty(i) || (i.split(","), r = getOptionsString(i, r)), t(this).circleProgress(r); var o = t(this).find(".inner-circle .counter-circle"); o && (t(this).find(".inner-circle").css("display", "table"), t(this).on("circle-animation-progress", function (i, e, s) { t(o).html(parseInt(100 * s.toFixed(2), 10) + " " + n) })) } }(jQuery);
